{"version":3,"sources":["useToggle.tsx","icons.tsx","slider.tsx","map.tsx","App.tsx","useShaked.tsx","impressum.tsx","serviceWorker.ts","index.tsx"],"names":["useToggle","initial","useState","state","setState","toggle","useCallback","last","setTrue","setFalse","IconContext","props","fullSize","children","undefined","isDarkTheme","Provider","value","color","style","width","height","groups","Icon","GiAtom","size","GiPlantsAndAnimals","GiBananaPeeled","GiGreatWarTank","GiAirplane","GiDreadnought","DIV","length","Slider","React","setValue","handleChange","val","idx","Math","max","min","floor","pick","inputSize","useSpring","config","wobbly","onChange","div","useSlider","center","current","fireCircle","latDistribution","gaussian","lngDistribution","lats","random","longs","console","log","redIcon","Leaflet","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","Map","isShowing","onClose","isOpen","closeable","className","zoom","TileLayer","url","attribution","Marker","position","Popup","_","times","map","pos","icon","engine","Styletron","Centered","styled","display","justifyContent","alignItems","flexDirection","maxWidth","margin","App","modifyIsDarkTheme","useLayoutEffect","document","body","transition","backgroundColor","callback","wasShaked","modifyWasShaked","handler","setTimeout","useEffect","shaker","Shake","threshold","timeout","start","stop","onClick","useShaked","ManualShaker","whatHappened","setWhatHappened","handleWhatHappened","e","currentTarget","whatToDo","setWhatToDo","handleWhatToDo","isShowingMap","modifyIsShowingMap","onDismissMap","isShowingImpressum","modifyIsShowingImpressum","animate","autoFocus","element","StyledLink","email","headers","subject","href","useImpressum","ImpressumButton","ImpressumModal","theme","DarkTheme","LightTheme","overrides","Root","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.78acae6f.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\n\nexport function useToggle(initial = true) {\n  const [state, setState] = useState(initial)\n  const toggle = useCallback(() => {\n    setState((last) => !last)\n  }, [])\n  const setTrue = useCallback(() => setState(true), [])\n  const setFalse = useCallback(() => setState(false), [])\n  return [state, { toggle, setTrue, setFalse }] as const\n}\n","import React from 'react'\nimport { IconContext as RIIC } from 'react-icons'\n\nexport const IconContext: React.FC<{\n  isDarkTheme?: boolean\n  fullSize: boolean\n}> = (props) => {\n  const { fullSize = false, children = undefined, isDarkTheme = true } = props\n  return (\n    <RIIC.Provider\n      value={{\n        color: isDarkTheme ? 'white' : 'black',\n        ...(fullSize\n          ? {\n              style: {\n                width: '100%',\n                height: '100%',\n              },\n            }\n          : {}),\n      }}\n    >\n      {children}\n    </RIIC.Provider>\n  )\n}\n","import React, { useCallback } from 'react'\nimport {\n  GiAtom,\n  GiPlantsAndAnimals,\n  GiBananaPeeled,\n  GiGreatWarTank,\n  GiAirplane,\n  GiDreadnought,\n} from 'react-icons/gi'\nimport { Slider as BaseSlider } from 'baseui/slider'\nimport { IconType } from 'react-icons/lib'\nimport { useSpring, animated, config } from 'react-spring'\nimport { IconContext } from './icons'\n\nconst groups: { Icon: IconType; size: number }[] = [\n  { Icon: GiAtom, size: 50 },\n  { Icon: GiPlantsAndAnimals, size: 100 },\n  { Icon: GiBananaPeeled, size: 150 },\n  { Icon: GiGreatWarTank, size: 200 },\n  { Icon: GiAirplane, size: 400 },\n  { Icon: GiDreadnought, size: 600 },\n]\n\nconst MIN = 1\nconst MAX = 1000\nconst DIV = (MAX - MIN) / groups.length\n\nfunction pick(val: number) {\n  const idx = Math.max(0, Math.min(Math.floor(val / DIV), groups.length - 1))\n  return groups[idx]\n}\n\nexport const Slider: React.FC<{ isDarkTheme?: boolean }> = ({\n  isDarkTheme,\n}) => {\n  const [value, setValue] = React.useState([1])\n  const handleChange = useCallback(\n    ({ value }) => value[0] >= MIN && value[0] <= MAX && setValue(value),\n    []\n  )\n  const { Icon, size: inputSize } = pick(value[0])\n  const props = useSpring({\n    width: inputSize,\n    height: inputSize,\n    size: inputSize,\n    config: config.wobbly,\n  })\n\n  return (\n    <IconContext isDarkTheme={isDarkTheme} fullSize={true}>\n      <BaseSlider min={MIN} max={MAX} value={value} onChange={handleChange} />\n\n      <animated.div style={props}>\n        <Icon />\n      </animated.div>\n    </IconContext>\n  )\n}\n\nexport function useSlider(isDarkTheme?: boolean) {\n  return [<Slider isDarkTheme={isDarkTheme} />]\n}\n\nexport default useSlider\n","import React from 'react'\nimport { Map as OSMap, Marker, Popup, TileLayer } from 'react-leaflet'\nimport { LatLngTuple } from 'leaflet'\nimport { Modal } from 'baseui/modal'\nimport { ParagraphMedium } from 'baseui/typography'\nimport './Leaflet.css'\nimport { GiHomeGarage, GiEnergyArrow, GiWaterBolt } from 'react-icons/gi'\nimport Leaflet from 'leaflet'\nimport _ from 'lodash-es'\n\nimport gaussian from 'gaussian'\n\nconst center: LatLngTuple = [50.189, 8.5201703]\nconst current: LatLngTuple = [50.18087, 8.52572]\nconst fireCircle: LatLngTuple = [50.195, 8.5201703]\nconst latDistribution = gaussian(fireCircle[0], 0.00002)\nconst lngDistribution = gaussian(fireCircle[1], 0.00002)\nconst NUM_EXTRAS = 40\nconst lats = latDistribution.random(NUM_EXTRAS)\nconst longs = lngDistribution.random(NUM_EXTRAS)\nconsole.log(lats, longs)\n\nvar redIcon = new Leaflet.Icon({\n  iconUrl:\n    'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n  shadowUrl:\n    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41],\n})\n\nexport function Map(props: { isShowing?: boolean; onClose?: () => void }) {\n  const { isShowing = false, onClose } = props\n  return (\n    <Modal isOpen={isShowing} closeable onClose={onClose}>\n      <div className=\"details-on-map show-map\">\n        <div className=\"paper-map\">\n          <div className=\"map-side\"></div>\n          <div className=\"map-side\"></div>\n          <div className=\"map-side\"></div>\n          <div className=\"map-side\"></div>\n        </div>\n        <OSMap center={center} zoom={14}>\n          <TileLayer\n            url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\n          />\n          <Marker position={current}>\n            <Popup>\n              <ParagraphMedium>\n                <GiHomeGarage />\n                Home Base <br />\n                <GiEnergyArrow />\n                Energy: 23/100 <br />\n                <GiWaterBolt />\n                Water: 75/100 <br />\n              </ParagraphMedium>\n            </Popup>\n          </Marker>\n          {_.times(NUM_EXTRAS).map((idx) => {\n            const pos: LatLngTuple = [lats[idx], longs[idx]]\n            return (\n              <Marker position={pos} icon={redIcon}>\n                <Popup>\n                  <ParagraphMedium>\n                    <GiHomeGarage />\n                    Home Base <br />\n                    <GiEnergyArrow />\n                    Energy: 23/100 <br />\n                    <GiWaterBolt />\n                    Water: 75/100 <br />\n                  </ParagraphMedium>\n                </Popup>\n              </Marker>\n            )\n          })}\n        </OSMap>\n      </div>\n    </Modal>\n  )\n}\n\nexport default Map\n","import React, { useCallback, useState, useLayoutEffect } from 'react'\nimport './App.css'\n\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as StyletronProvider } from 'styletron-react'\nimport { LightTheme, DarkTheme, BaseProvider, styled } from 'baseui'\nimport { Input } from 'baseui/input'\nimport useShaked from './useShaked'\nimport useSlider from './slider'\nimport { ButtonGroup } from 'baseui/button-group'\nimport { useImpressum } from './impressum'\nimport { useToggle } from './useToggle'\nimport { Heading, HeadingLevel } from 'baseui/heading'\nimport { Button } from 'baseui/button'\nimport { GiLightBulb, GiTreasureMap } from 'react-icons/gi'\nimport { Textarea } from 'baseui/textarea'\nimport Map from './map'\nimport { IconContext } from './icons'\n\nconst engine = new Styletron()\n\nconst Centered = styled('div', {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  height: '100%',\n  flexDirection: 'column',\n  maxWidth: '640px',\n  margin: 'auto',\n})\n\nexport function App() {\n  const [isDarkTheme, modifyIsDarkTheme] = useToggle()\n\n  useLayoutEffect(() => {\n    if (!isDarkTheme)\n      document.body.style.transition = 'background-color 500ms linear 0s'\n    document.body.style.backgroundColor = isDarkTheme ? 'black' : 'white'\n  }, [isDarkTheme])\n\n  const shakeHandler = useCallback(() => {\n    console.log('shaked')\n  }, [])\n\n  const [wasShaked, ManualShaker] = useShaked(shakeHandler)\n\n  const [whatHappened, setWhatHappened] = useState('')\n\n  const handleWhatHappened = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) =>\n      setWhatHappened(e.currentTarget.value),\n    []\n  )\n\n  const [whatToDo, setWhatToDo] = useState('')\n\n  const handleWhatToDo = useCallback(\n    (e: React.FormEvent<HTMLTextAreaElement>) =>\n      setWhatToDo(e.currentTarget.value),\n    []\n  )\n\n  const [isShowingMap, modifyIsShowingMap] = useToggle(true)\n\n  const onDismissMap = useCallback(() => {\n    modifyIsShowingMap.setFalse()\n  }, [modifyIsShowingMap])\n\n  const [Slider] = useSlider(isDarkTheme)\n  const [ImpressumButton, ImpressumModal] = useImpressum()\n\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={isDarkTheme ? DarkTheme : LightTheme}>\n        <IconContext isDarkTheme={isDarkTheme} fullSize={false}>\n          <Centered className=\"centred\">\n            <Map isShowing={isShowingMap} onClose={onDismissMap} />\n            <ButtonGroup\n              overrides={{\n                Root: {\n                  style: {},\n                },\n              }}\n            >\n              {ManualShaker}\n              <Button onClick={modifyIsShowingMap.setTrue}>\n                <GiTreasureMap />\n              </Button>\n              {ImpressumButton}\n              <Button onClick={modifyIsDarkTheme.toggle}>\n                <GiLightBulb />\n              </Button>\n            </ButtonGroup>\n            <HeadingLevel>\n              <Heading>How bad do you feel?</Heading>\n              {Slider}\n            </HeadingLevel>\n            <HeadingLevel>\n              <Heading>What did you do?</Heading>\n              <Input\n                value={whatHappened}\n                onChange={handleWhatHappened}\n                placeholder=\"?\"\n              />\n            </HeadingLevel>\n            <HeadingLevel>\n              <Heading>What do you want to do?</Heading>\n              <Textarea value={whatToDo} onChange={handleWhatToDo} />\n            </HeadingLevel>\n            <HeadingLevel>\n              {wasShaked && <Heading>yeah baby!</Heading>}\n            </HeadingLevel>\n            {ImpressumModal}\n          </Centered>\n        </IconContext>\n      </BaseProvider>\n    </StyletronProvider>\n  )\n}\n\nexport default App\n","import Shake from '@zouloux/shake'\nimport React, { useEffect, useCallback } from 'react'\nimport { useToggle } from './useToggle'\nimport { Button } from 'baseui/button'\n\nexport default function useShaked(callback?: () => void) {\n  const [wasShaked, modifyWasShaked] = useToggle(false)\n\n  const handler = useCallback(() => {\n    modifyWasShaked.setTrue()\n    callback?.()\n    setTimeout(() => {\n      modifyWasShaked.setFalse()\n    }, 2000)\n  }, [callback, modifyWasShaked])\n\n  useEffect(() => {\n    const shaker = new Shake({\n      threshold: 15, // optional shake strength threshold\n      timeout: 1000, // optional, determines the frequency of event generation\n      handler,\n    })\n    shaker.start()\n    return () => {\n      shaker.stop()\n    }\n  })\n\n  return [\n    wasShaked,\n    <Button onClick={handler}>Shange the World!</Button>,\n  ] as const\n}\n","import React from 'react'\nimport { Button } from 'baseui/button'\nimport { Modal, ModalHeader, ModalBody } from 'baseui/modal'\nimport Obfuscate from 'react-obfuscate'\nimport { StyledLink } from 'baseui/link'\nimport { useToggle } from './useToggle'\n\nexport function useImpressum() {\n  const [isShowingImpressum, modifyIsShowingImpressum] = useToggle(false)\n  return [\n    <Button onClick={modifyIsShowingImpressum.toggle}>Impressum</Button>,\n    <Modal\n      onClose={modifyIsShowingImpressum.setFalse}\n      closeable\n      isOpen={isShowingImpressum}\n      animate\n      autoFocus\n    >\n      <ModalHeader>Impressum</ModalHeader>\n      <ModalBody>\n        Verantwortlich nach § 55 Abs.2 RStV\n        <br />\n        Johannes Goslar, Wendelinsweg 2, 61476 Kronberg\n        <br />\n        <Obfuscate\n          element={StyledLink}\n          email=\"climate@kronberger-spiele.de\"\n          headers={{\n            subject: '2020 climate hack',\n            body: 'Shange the world!',\n          }}\n        />\n        <br />\n        <br />\n        <StyledLink href=\"https://game-icons.net/\">\n          \"Game Icons\"\n        </StyledLink> by{' '}\n        <StyledLink href=\"http://lorcblog.blogspot.com/\">Lorc</StyledLink>,{' '}\n        <StyledLink href=\"https://delapouite.com/\">Delapouite</StyledLink> and{' '}\n        <StyledLink href=\"https://game-icons.net/about.html#authors\">\n          contributors\n        </StyledLink>{' '}\n        is licensed under{' '}\n        <StyledLink href=\"https://creativecommons.org/licenses/by/3.0/\">\n          CC BY 3.0\n        </StyledLink>\n      </ModalBody>\n    </Modal>,\n  ] as const\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}